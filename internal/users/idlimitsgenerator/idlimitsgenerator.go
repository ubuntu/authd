//go:build generate

// TiCS: disabled // This is a helper file to generate the IDs from pkg-config.

// Package main is the package for the ID limits generator.
package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strconv"
	"strings"
	"text/template"
)

const (
	outputFile = "idlimits.go"
)

const tmpl = `// Code generated by "{{ .GeneratorName }}"; DO NOT EDIT.
package users

const (
	// dynamic service users (nss-systemd).
	systemdDynamicUIDMin uint32 = {{ .DynamicUidMin }}
	systemdDynamicUIDMax uint32 = {{ .DynamicUidMax }}
)
`

type variables struct {
	GeneratorName string
	DynamicUidMin uint32
	DynamicUidMax uint32
}

func getPkgConfigVariable(library, variable string) (string, error) {
	cmd := exec.Command("pkg-config", library, fmt.Sprintf("--variable=%s", variable))
	out, err := cmd.CombinedOutput()
	return strings.TrimSpace(string(out)), err
}

func systemdLimitValue(variable string) uint32 {
	val, err := getPkgConfigVariable("systemd", variable)
	if err != nil {
		log.Fatalf("Error getting pkg-config variable %q: %v", variable, err)
	}

	uintVal, err := strconv.ParseUint(val, 10, 32)
	if err != nil {
		log.Fatalf("Error parsing %q value %q to uint32: %v", variable, val, err)
	}
	return uint32(uintVal)
}

func main() {
	generatorName, err := os.Executable()
	if err != nil {
		log.Fatal(err)
	}

	vars := variables{
		GeneratorName: filepath.Base(generatorName),
		DynamicUidMin: systemdLimitValue("dynamic_uid_min"),
		DynamicUidMax: systemdLimitValue("dynamic_uid_max"),
	}

	tmpl, err := template.New("idlimits").Parse(tmpl)
	if err != nil {
		log.Fatalf("Failed to parse template: %v", err)
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, vars); err != nil {
		log.Fatalf("Failed to execute template: %v", err)
	}

	if err := os.WriteFile(outputFile, buf.Bytes(), 0600); err != nil {
		log.Fatalf("Failed to write output file: %v", err)
	}
}

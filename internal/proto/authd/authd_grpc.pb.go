// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: authd.proto

package authd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PAM_AvailableBrokers_FullMethodName         = "/authd.PAM/AvailableBrokers"
	PAM_GetPreviousBroker_FullMethodName        = "/authd.PAM/GetPreviousBroker"
	PAM_SelectBroker_FullMethodName             = "/authd.PAM/SelectBroker"
	PAM_GetAuthenticationModes_FullMethodName   = "/authd.PAM/GetAuthenticationModes"
	PAM_SelectAuthenticationMode_FullMethodName = "/authd.PAM/SelectAuthenticationMode"
	PAM_IsAuthenticated_FullMethodName          = "/authd.PAM/IsAuthenticated"
	PAM_EndSession_FullMethodName               = "/authd.PAM/EndSession"
	PAM_SetDefaultBrokerForUser_FullMethodName  = "/authd.PAM/SetDefaultBrokerForUser"
)

// PAMClient is the client API for PAM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PAMClient interface {
	AvailableBrokers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ABResponse, error)
	GetPreviousBroker(ctx context.Context, in *GPBRequest, opts ...grpc.CallOption) (*GPBResponse, error)
	SelectBroker(ctx context.Context, in *SBRequest, opts ...grpc.CallOption) (*SBResponse, error)
	GetAuthenticationModes(ctx context.Context, in *GAMRequest, opts ...grpc.CallOption) (*GAMResponse, error)
	SelectAuthenticationMode(ctx context.Context, in *SAMRequest, opts ...grpc.CallOption) (*SAMResponse, error)
	IsAuthenticated(ctx context.Context, in *IARequest, opts ...grpc.CallOption) (*IAResponse, error)
	EndSession(ctx context.Context, in *ESRequest, opts ...grpc.CallOption) (*Empty, error)
	SetDefaultBrokerForUser(ctx context.Context, in *SDBFURequest, opts ...grpc.CallOption) (*Empty, error)
}

type pAMClient struct {
	cc grpc.ClientConnInterface
}

func NewPAMClient(cc grpc.ClientConnInterface) PAMClient {
	return &pAMClient{cc}
}

func (c *pAMClient) AvailableBrokers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ABResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ABResponse)
	err := c.cc.Invoke(ctx, PAM_AvailableBrokers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) GetPreviousBroker(ctx context.Context, in *GPBRequest, opts ...grpc.CallOption) (*GPBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPBResponse)
	err := c.cc.Invoke(ctx, PAM_GetPreviousBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) SelectBroker(ctx context.Context, in *SBRequest, opts ...grpc.CallOption) (*SBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SBResponse)
	err := c.cc.Invoke(ctx, PAM_SelectBroker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) GetAuthenticationModes(ctx context.Context, in *GAMRequest, opts ...grpc.CallOption) (*GAMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GAMResponse)
	err := c.cc.Invoke(ctx, PAM_GetAuthenticationModes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) SelectAuthenticationMode(ctx context.Context, in *SAMRequest, opts ...grpc.CallOption) (*SAMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAMResponse)
	err := c.cc.Invoke(ctx, PAM_SelectAuthenticationMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) IsAuthenticated(ctx context.Context, in *IARequest, opts ...grpc.CallOption) (*IAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IAResponse)
	err := c.cc.Invoke(ctx, PAM_IsAuthenticated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) EndSession(ctx context.Context, in *ESRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PAM_EndSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) SetDefaultBrokerForUser(ctx context.Context, in *SDBFURequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PAM_SetDefaultBrokerForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PAMServer is the server API for PAM service.
// All implementations must embed UnimplementedPAMServer
// for forward compatibility.
type PAMServer interface {
	AvailableBrokers(context.Context, *Empty) (*ABResponse, error)
	GetPreviousBroker(context.Context, *GPBRequest) (*GPBResponse, error)
	SelectBroker(context.Context, *SBRequest) (*SBResponse, error)
	GetAuthenticationModes(context.Context, *GAMRequest) (*GAMResponse, error)
	SelectAuthenticationMode(context.Context, *SAMRequest) (*SAMResponse, error)
	IsAuthenticated(context.Context, *IARequest) (*IAResponse, error)
	EndSession(context.Context, *ESRequest) (*Empty, error)
	SetDefaultBrokerForUser(context.Context, *SDBFURequest) (*Empty, error)
	mustEmbedUnimplementedPAMServer()
}

// UnimplementedPAMServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPAMServer struct{}

func (UnimplementedPAMServer) AvailableBrokers(context.Context, *Empty) (*ABResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableBrokers not implemented")
}
func (UnimplementedPAMServer) GetPreviousBroker(context.Context, *GPBRequest) (*GPBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousBroker not implemented")
}
func (UnimplementedPAMServer) SelectBroker(context.Context, *SBRequest) (*SBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBroker not implemented")
}
func (UnimplementedPAMServer) GetAuthenticationModes(context.Context, *GAMRequest) (*GAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticationModes not implemented")
}
func (UnimplementedPAMServer) SelectAuthenticationMode(context.Context, *SAMRequest) (*SAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAuthenticationMode not implemented")
}
func (UnimplementedPAMServer) IsAuthenticated(context.Context, *IARequest) (*IAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthenticated not implemented")
}
func (UnimplementedPAMServer) EndSession(context.Context, *ESRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (UnimplementedPAMServer) SetDefaultBrokerForUser(context.Context, *SDBFURequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultBrokerForUser not implemented")
}
func (UnimplementedPAMServer) mustEmbedUnimplementedPAMServer() {}
func (UnimplementedPAMServer) testEmbeddedByValue()             {}

// UnsafePAMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PAMServer will
// result in compilation errors.
type UnsafePAMServer interface {
	mustEmbedUnimplementedPAMServer()
}

func RegisterPAMServer(s grpc.ServiceRegistrar, srv PAMServer) {
	// If the following call pancis, it indicates UnimplementedPAMServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PAM_ServiceDesc, srv)
}

func _PAM_AvailableBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).AvailableBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_AvailableBrokers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).AvailableBrokers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_GetPreviousBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).GetPreviousBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_GetPreviousBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).GetPreviousBroker(ctx, req.(*GPBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_SelectBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).SelectBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_SelectBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).SelectBroker(ctx, req.(*SBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_GetAuthenticationModes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).GetAuthenticationModes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_GetAuthenticationModes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).GetAuthenticationModes(ctx, req.(*GAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_SelectAuthenticationMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).SelectAuthenticationMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_SelectAuthenticationMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).SelectAuthenticationMode(ctx, req.(*SAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_IsAuthenticated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).IsAuthenticated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_IsAuthenticated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).IsAuthenticated(ctx, req.(*IARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ESRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_EndSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).EndSession(ctx, req.(*ESRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_SetDefaultBrokerForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDBFURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).SetDefaultBrokerForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_SetDefaultBrokerForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).SetDefaultBrokerForUser(ctx, req.(*SDBFURequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PAM_ServiceDesc is the grpc.ServiceDesc for PAM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PAM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authd.PAM",
	HandlerType: (*PAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AvailableBrokers",
			Handler:    _PAM_AvailableBrokers_Handler,
		},
		{
			MethodName: "GetPreviousBroker",
			Handler:    _PAM_GetPreviousBroker_Handler,
		},
		{
			MethodName: "SelectBroker",
			Handler:    _PAM_SelectBroker_Handler,
		},
		{
			MethodName: "GetAuthenticationModes",
			Handler:    _PAM_GetAuthenticationModes_Handler,
		},
		{
			MethodName: "SelectAuthenticationMode",
			Handler:    _PAM_SelectAuthenticationMode_Handler,
		},
		{
			MethodName: "IsAuthenticated",
			Handler:    _PAM_IsAuthenticated_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _PAM_EndSession_Handler,
		},
		{
			MethodName: "SetDefaultBrokerForUser",
			Handler:    _PAM_SetDefaultBrokerForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authd.proto",
}

const (
	UserService_GetUserByName_FullMethodName  = "/authd.UserService/GetUserByName"
	UserService_GetUserByID_FullMethodName    = "/authd.UserService/GetUserByID"
	UserService_ListUsers_FullMethodName      = "/authd.UserService/ListUsers"
	UserService_GetGroupByName_FullMethodName = "/authd.UserService/GetGroupByName"
	UserService_GetGroupByID_FullMethodName   = "/authd.UserService/GetGroupByID"
	UserService_ListGroups_FullMethodName     = "/authd.UserService/ListGroups"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*User, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*User, error)
	ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Users, error)
	GetGroupByName(ctx context.Context, in *GetGroupByNameRequest, opts ...grpc.CallOption) (*Group, error)
	GetGroupByID(ctx context.Context, in *GetGroupByIDRequest, opts ...grpc.CallOption) (*Group, error)
	ListGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Groups, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUserByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, UserService_GetUserByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Users, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Users)
	err := c.cc.Invoke(ctx, UserService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetGroupByName(ctx context.Context, in *GetGroupByNameRequest, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, UserService_GetGroupByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetGroupByID(ctx context.Context, in *GetGroupByIDRequest, opts ...grpc.CallOption) (*Group, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Group)
	err := c.cc.Invoke(ctx, UserService_GetGroupByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Groups, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Groups)
	err := c.cc.Invoke(ctx, UserService_ListGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	GetUserByName(context.Context, *GetUserByNameRequest) (*User, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*User, error)
	ListUsers(context.Context, *Empty) (*Users, error)
	GetGroupByName(context.Context, *GetGroupByNameRequest) (*Group, error)
	GetGroupByID(context.Context, *GetGroupByIDRequest) (*Group, error)
	ListGroups(context.Context, *Empty) (*Groups, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) GetUserByName(context.Context, *GetUserByNameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedUserServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserServiceServer) ListUsers(context.Context, *Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) GetGroupByName(context.Context, *GetGroupByNameRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByName not implemented")
}
func (UnimplementedUserServiceServer) GetGroupByID(context.Context, *GetGroupByIDRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupByID not implemented")
}
func (UnimplementedUserServiceServer) ListGroups(context.Context, *Empty) (*Groups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByName(ctx, req.(*GetUserByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetGroupByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetGroupByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetGroupByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetGroupByName(ctx, req.(*GetGroupByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetGroupByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetGroupByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetGroupByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetGroupByID(ctx, req.(*GetGroupByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListGroups(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authd.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByName",
			Handler:    _UserService_GetUserByName_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserService_GetUserByID_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "GetGroupByName",
			Handler:    _UserService_GetGroupByName_Handler,
		},
		{
			MethodName: "GetGroupByID",
			Handler:    _UserService_GetGroupByID_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _UserService_ListGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authd.proto",
}

name: QA & sanity checks
on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/automatic-doc-checks.yml'
      - '.readthedocs.yaml'
      - 'docs/**'
    tags:
      - "*"
  pull_request:
    paths-ignore:
      - '.github/workflows/automatic-doc-checks.yml'
      - '.readthedocs.yaml'
      - 'docs/**'

env:
  DEBIAN_FRONTEND: noninteractive
  GO_TESTS_TIMEOUT: 20m
  apt_deps: >-
    libpam-dev
    libglib2.0-dev
    libpwquality-dev

  test_apt_deps: >-
    apparmor-profiles
    bubblewrap
    cracklib-runtime
    git-delta
    openssh-client
    openssh-server

  # In Rust the grpc stubs are generated at build time
  # so we always need to install the protobuf compilers
  # when building the NSS crate.
  protobuf_compilers: >-
    protobuf-compiler

jobs:
  go-sanity:
    name: "Go: Code sanity"
    runs-on: ubuntu-24.04 # ubuntu-latest-runner
    steps:
      - uses: canonical/desktop-engineering/gh-actions/common/dpkg-exclude-locales-and-manpages@dpkg-exclude-locales-and-manpages
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y ${{ env.apt_deps }}
      - uses: actions/checkout@v5
      - name: Go code sanity check
        uses: canonical/desktop-engineering/gh-actions/go/code-sanity@v1
        with:
          golangci-lint-configfile: ".golangci.yaml"
          tools-directory: "tools"
      - name: Build cmd/authd with withexamplebroker tag
        run: |
          set -eu
          go build -tags withexamplebroker ./cmd/authd
      - name: Run PAM client for interactive testing purposes
        run: |
          set -eu
          go run -tags withpamrunner ./pam/tools/pam-runner login --exec-debug
      - name: Generate PAM module
        run: |
          set -eu
          find pam -name '*.so' -print -delete
          go generate -C pam -x
          test -e pam/pam_authd.so
          test -e pam/go-exec/pam_authd_exec.so
      - name: Generate PAM module with pam_debug tag
        run: |
          set -eu
          find pam -name '*.so' -print -delete
          go generate -C pam -x -tags pam_debug
          test -e pam/pam_authd.so
          test -e pam/go-exec/pam_authd_exec.so

  rust-sanity:
    name: "Rust: Code sanity"
    runs-on: ubuntu-24.04 # ubuntu-latest-runner
    steps:
      - uses: canonical/desktop-engineering/gh-actions/common/dpkg-exclude-locales-and-manpages@dpkg-exclude-locales-and-manpages
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y ${{ env.apt_deps }} ${{ env.protobuf_compilers}}
      - uses: actions/checkout@v5
      - name: Rust code sanity check
        uses: canonical/desktop-engineering/gh-actions/rust/code-sanity@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  c-sanity:
    name: "C Code sanity"
    runs-on: ubuntu-24.04 # ubuntu-latest-runner
    env:
      CFLAGS: "-Werror"
    steps:
      - uses: canonical/desktop-engineering/gh-actions/common/dpkg-exclude-locales-and-manpages@dpkg-exclude-locales-and-manpages
      - name: Install dependencies
        run: |
          set -eu

          sudo apt update
          sudo apt install -y ${{ env.apt_deps }} clang-tools clang
      - name: Prepare report dir
        run: |
          set -eu

          scan_build_dir=$(mktemp -d --tmpdir scan-build-dir-XXXXXX)
          echo SCAN_BUILD_REPORTS_PATH="${scan_build_dir}" >> $GITHUB_ENV
      - uses: actions/checkout@v5
      - name: Run scan build on GDM extensions
        run: |
          set -eu

          scan-build -v -o "${SCAN_BUILD_REPORTS_PATH}" clang ${CFLAGS} \
            -Wno-gnu-variable-sized-type-not-at-end \
            pam/internal/gdm/extension.h
      - name: Run scan build on go-exec module
        run: |
          set -eu

          scan-build -v -o "${SCAN_BUILD_REPORTS_PATH}" clang ${CFLAGS} \
            -DAUTHD_TEST_MODULE=1 \
            $(pkg-config --cflags --libs gio-unix-2.0 gio-2.0) \
            -lpam -shared -fPIC \
            pam/go-exec/module.c
      - name: Upload scan build reports
        uses: actions/upload-artifact@v4
        with:
          name: authd-${{ github.job }}-artifacts-${{ github.run_attempt }}
          path: ${{ env.SCAN_BUILD_REPORTS_PATH }}

name: TICS QA Analysis

on:
    schedule:
        - cron: '0 0 * * 1'  # Runs every Monday at midnight
    workflow_dispatch:


env:
  DEBIAN_FRONTEND: noninteractive
  build_dependencies: >-
    clang-tools
    clang
    libglib2.0-dev
    libpam-dev
    libpwquality-dev

jobs:
    tics:
        name: TIOBE TICS Framework
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v5
            - uses: actions/setup-go@v6
              with:
                go-version-file: go.mod


            - name: Update Rust version
              run: |
                rustup update stable

            - uses: canonical/desktop-engineering/gh-actions/common/dpkg-install-speedup@main
            - name: Install dependencies
              run: |
                set -eu

                sudo apt-get update
                sudo apt-get install -y ${{ env.build_dependencies }}

                go install honnef.co/go/tools/cmd/staticcheck@latest

            - name: Fetch last successful QA run id
              env:
                GITHUB_TOKEN: ${{ github.token }}
              run: |
                set -eu
                echo "LAST_QA_ID=$(gh run list --workflow 'QA & sanity checks' --limit 1 --status success --json databaseId -b main | jq '.[].databaseId')" >> $GITHUB_ENV

            - name: Download coverage artifact
              uses: actions/download-artifact@v5
              with:
                github-token: ${{ github.token }}
                path: .artifacts/
                run-id: ${{ env.LAST_QA_ID }}

            - name: TICS Scan
              env:
                TICSAUTHTOKEN: ${{ secrets.TICSAUTHTOKEN }}
                GH_TOKEN: ${{ github.token }}
              run: |
                set -e

                # Move coverage to expected directory
                mkdir coverage
                mv .artifacts/coverage/Cobertura.xml coverage/coverage.xml

                # Install TICS
                . <(curl --silent --show-error 'https://canonical.tiobe.com/tiobeweb/TICS/api/public/v1/fapi/installtics/Script?cfg=GoProjects&platform=linux&url=https://canonical.tiobe.com/tiobeweb/TICS/')

                # TICS needs to build the artifacts in order to run the analysis.
                # Since it uses the GOTOOLCHAIN=local stanza, it's better if we prebuild it to make sure that the Go
                # toolchain setup by the action is properly updated to the one we defined in go.mod. Prebuilding also
                # helps to speed up the TICS analysis, as we would already have the build cache populated.
                find pam -name '*.so' -print -delete
                go generate -C pam -x
                go build ./cmd/authd

                TICSQServer -project authd -tmpdir /tmp/tics -branchdir .

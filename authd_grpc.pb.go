// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: authd.proto

package authd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PAM_AvailableBrokers_FullMethodName         = "/PAM/AvailableBrokers"
	PAM_SelectBroker_FullMethodName             = "/PAM/SelectBroker"
	PAM_SelectAuthenticationMode_FullMethodName = "/PAM/SelectAuthenticationMode"
	PAM_IsAuthorized_FullMethodName             = "/PAM/IsAuthorized"
	PAM_AbortSession_FullMethodName             = "/PAM/AbortSession"
	PAM_SetDefaultBrokerForUser_FullMethodName  = "/PAM/SetDefaultBrokerForUser"
)

// PAMClient is the client API for PAM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PAMClient interface {
	AvailableBrokers(ctx context.Context, in *ABRequest, opts ...grpc.CallOption) (*ABResponse, error)
	SelectBroker(ctx context.Context, in *SBRequest, opts ...grpc.CallOption) (*SBResponse, error)
	SelectAuthenticationMode(ctx context.Context, in *SAMRequest, opts ...grpc.CallOption) (*SAMResponse, error)
	IsAuthorized(ctx context.Context, in *IARequest, opts ...grpc.CallOption) (*IAResponse, error)
	AbortSession(ctx context.Context, in *ASRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetDefaultBrokerForUser(ctx context.Context, in *SDBFURequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pAMClient struct {
	cc grpc.ClientConnInterface
}

func NewPAMClient(cc grpc.ClientConnInterface) PAMClient {
	return &pAMClient{cc}
}

func (c *pAMClient) AvailableBrokers(ctx context.Context, in *ABRequest, opts ...grpc.CallOption) (*ABResponse, error) {
	out := new(ABResponse)
	err := c.cc.Invoke(ctx, PAM_AvailableBrokers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) SelectBroker(ctx context.Context, in *SBRequest, opts ...grpc.CallOption) (*SBResponse, error) {
	out := new(SBResponse)
	err := c.cc.Invoke(ctx, PAM_SelectBroker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) SelectAuthenticationMode(ctx context.Context, in *SAMRequest, opts ...grpc.CallOption) (*SAMResponse, error) {
	out := new(SAMResponse)
	err := c.cc.Invoke(ctx, PAM_SelectAuthenticationMode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) IsAuthorized(ctx context.Context, in *IARequest, opts ...grpc.CallOption) (*IAResponse, error) {
	out := new(IAResponse)
	err := c.cc.Invoke(ctx, PAM_IsAuthorized_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) AbortSession(ctx context.Context, in *ASRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PAM_AbortSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pAMClient) SetDefaultBrokerForUser(ctx context.Context, in *SDBFURequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PAM_SetDefaultBrokerForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PAMServer is the server API for PAM service.
// All implementations must embed UnimplementedPAMServer
// for forward compatibility
type PAMServer interface {
	AvailableBrokers(context.Context, *ABRequest) (*ABResponse, error)
	SelectBroker(context.Context, *SBRequest) (*SBResponse, error)
	SelectAuthenticationMode(context.Context, *SAMRequest) (*SAMResponse, error)
	IsAuthorized(context.Context, *IARequest) (*IAResponse, error)
	AbortSession(context.Context, *ASRequest) (*emptypb.Empty, error)
	SetDefaultBrokerForUser(context.Context, *SDBFURequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPAMServer()
}

// UnimplementedPAMServer must be embedded to have forward compatible implementations.
type UnimplementedPAMServer struct {
}

func (UnimplementedPAMServer) AvailableBrokers(context.Context, *ABRequest) (*ABResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableBrokers not implemented")
}
func (UnimplementedPAMServer) SelectBroker(context.Context, *SBRequest) (*SBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBroker not implemented")
}
func (UnimplementedPAMServer) SelectAuthenticationMode(context.Context, *SAMRequest) (*SAMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAuthenticationMode not implemented")
}
func (UnimplementedPAMServer) IsAuthorized(context.Context, *IARequest) (*IAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthorized not implemented")
}
func (UnimplementedPAMServer) AbortSession(context.Context, *ASRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortSession not implemented")
}
func (UnimplementedPAMServer) SetDefaultBrokerForUser(context.Context, *SDBFURequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultBrokerForUser not implemented")
}
func (UnimplementedPAMServer) mustEmbedUnimplementedPAMServer() {}

// UnsafePAMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PAMServer will
// result in compilation errors.
type UnsafePAMServer interface {
	mustEmbedUnimplementedPAMServer()
}

func RegisterPAMServer(s grpc.ServiceRegistrar, srv PAMServer) {
	s.RegisterService(&PAM_ServiceDesc, srv)
}

func _PAM_AvailableBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ABRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).AvailableBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_AvailableBrokers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).AvailableBrokers(ctx, req.(*ABRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_SelectBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).SelectBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_SelectBroker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).SelectBroker(ctx, req.(*SBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_SelectAuthenticationMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).SelectAuthenticationMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_SelectAuthenticationMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).SelectAuthenticationMode(ctx, req.(*SAMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_IsAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).IsAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_IsAuthorized_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).IsAuthorized(ctx, req.(*IARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_AbortSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ASRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).AbortSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_AbortSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).AbortSession(ctx, req.(*ASRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PAM_SetDefaultBrokerForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDBFURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PAMServer).SetDefaultBrokerForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PAM_SetDefaultBrokerForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PAMServer).SetDefaultBrokerForUser(ctx, req.(*SDBFURequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PAM_ServiceDesc is the grpc.ServiceDesc for PAM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PAM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PAM",
	HandlerType: (*PAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AvailableBrokers",
			Handler:    _PAM_AvailableBrokers_Handler,
		},
		{
			MethodName: "SelectBroker",
			Handler:    _PAM_SelectBroker_Handler,
		},
		{
			MethodName: "SelectAuthenticationMode",
			Handler:    _PAM_SelectAuthenticationMode_Handler,
		},
		{
			MethodName: "IsAuthorized",
			Handler:    _PAM_IsAuthorized_Handler,
		},
		{
			MethodName: "AbortSession",
			Handler:    _PAM_AbortSession_Handler,
		},
		{
			MethodName: "SetDefaultBrokerForUser",
			Handler:    _PAM_SetDefaultBrokerForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authd.proto",
}

const (
	NSS_TestNSS_FullMethodName = "/NSS/TestNSS"
)

// NSSClient is the client API for NSS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NSSClient interface {
	TestNSS(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResponse, error)
}

type nSSClient struct {
	cc grpc.ClientConnInterface
}

func NewNSSClient(cc grpc.ClientConnInterface) NSSClient {
	return &nSSClient{cc}
}

func (c *nSSClient) TestNSS(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, NSS_TestNSS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NSSServer is the server API for NSS service.
// All implementations must embed UnimplementedNSSServer
// for forward compatibility
type NSSServer interface {
	TestNSS(context.Context, *emptypb.Empty) (*StringResponse, error)
	mustEmbedUnimplementedNSSServer()
}

// UnimplementedNSSServer must be embedded to have forward compatible implementations.
type UnimplementedNSSServer struct {
}

func (UnimplementedNSSServer) TestNSS(context.Context, *emptypb.Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestNSS not implemented")
}
func (UnimplementedNSSServer) mustEmbedUnimplementedNSSServer() {}

// UnsafeNSSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NSSServer will
// result in compilation errors.
type UnsafeNSSServer interface {
	mustEmbedUnimplementedNSSServer()
}

func RegisterNSSServer(s grpc.ServiceRegistrar, srv NSSServer) {
	s.RegisterService(&NSS_ServiceDesc, srv)
}

func _NSS_TestNSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NSSServer).TestNSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NSS_TestNSS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NSSServer).TestNSS(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NSS_ServiceDesc is the grpc.ServiceDesc for NSS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NSS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NSS",
	HandlerType: (*NSSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestNSS",
			Handler:    _NSS_TestNSS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authd.proto",
}
